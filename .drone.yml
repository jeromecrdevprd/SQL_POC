kind: pipeline
type: docker
name: IPM build
   
steps:    
  - name: clean
    image: mcr.microsoft.com/dotnet/sdk:latest
    commands:
      - dotnet clean SampleDB/SampleDB.sln
      
  - name: build
    image: mcr.microsoft.com/dotnet/core/sdk:latest
    commands:
      - dotnet build SampleDB/SampleDB.sln

trigger:
  branch:
    include:
      - test
  event:
    include:
      - push
      - pull_request
      
---
kind: pipeline
type: docker
name: IPM deploy
   
steps:    
  - name: clean
    image: mcr.microsoft.com/dotnet/sdk:latest
    commands:
      - dotnet clean SampleDB/SampleDB.sln
      
  - name: build
    image: mcr.microsoft.com/dotnet/core/sdk:latest
    commands:
      - dotnet build SampleDB/SampleDB.sln

  - name: Create token
    image: mcr.microsoft.com/powershell:latest
    environment:
      TENANTID:
        from_secret: TENANTID
      CLIENTID:
        from_secret: CLIENTID
      CLIENTSCT:
        from_secret: CLIENTSCT
    commands: 
      - pwsh /drone/src/IPM_token.ps1 $TENANTID $CLIENTID $CLIENTSCT
      - pwsh -Command {Get-content -Path /drone/src/token.txt}
      
  - name: Deploy to Azure SQL Database 
    pull: if-not-exists
    image: alpine
    image: sijaymm/sqlpackage
    environment:
      SERVER_NAME:
        from_secret: SERVER_NAME
      DB_NAME:
        from_secret: DB_NAME
      USERNAME:
        from_secret: USERNAME
      PASSWORD:
        from_secret: PASSWORD
      SQLAccessToken:
        from_secret: SQLAccessToken
    commands:
      - sqlpackage /a:Publish /sourcefile:/drone/src/SampleDB/Database.Build/bin/Debug/netstandard2.0/Database.Build.dacpac /tcs:"Server=$SERVER_NAME;Initial Catalog=$DB_NAME;Persist Security Info=False;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" /p:VerifyDeployment=True /p:AllowIncompatiblePlatform=True /AccessToken:"$value"

trigger:
  branch:
    include:
      - test
  event:
    include:
      - push
      - pull_request
      
